#!/bin/bash
#shellcheck disable=SC2002
#shellcheck disable=SC2034
#shellcheck disable=SC2027
#shellcheck disable=SC2086

FG="GREY"
BG="GREEN"
HL="BLUE"
declare -A COLORS=(
	[RED]=$(tput setaf 9)
	[GREEN]=$(tput setaf 112)
	[YELLOW]=$(tput setaf 143)
	[BLUE]=$(tput setaf 6)
	[MAGENTA]=$(tput setaf 126)
	[PURPLE]=$(tput setaf 133)
	[CYAN]=$(tput setaf 87)
	[GREEN2]=$(tput setaf 118)
	[WHITE]=$(tput setaf 255)
	[GREY]=$(tput setaf 00)
	[BOLD]=$(tput bold)
	[RESET]=$(tput sgr0)
)

showHelp(){
	echo "Usage: urch --flags /path <str>"
	echo ""
	echo "Options:"
	echo "  urch [b|-b|--binary] <str>         	Match for a binary."
	echo "  urch [d|-d|--directory] /path <str>	Match for a folder at the location."
	echo "  urch [f|-f|--file] /path <str>     	Match for a file at the location."
	echo "  urch [h|-h|--help]                 	Show help and exit."
	echo ""
	echo "Note:"
	echo "The script doesnt support quoted path and string arguments because theyre"
	echo "being quoted in the file already. The binary option doesnt take a path"
	echo "it will search in /bin, /usr/local/bin and ~/.local/bin."
}

cmpInit(){
	cmpMain(){
		local cmpReply
		cmpReply=$(compgen -W "$2" -- "${cmpWords[cmpCword]}")
	}
complete -F cmpMain read
}

readPath(){
	cmpInit
	while true; do
		echo -e "\nenter path\n"
		read -rep "▸ " PTH
		if [ -z "$PTH" ]; then
			echo -e "\n⚐ no input provided ⚐"
		elif [ ! -d "$PTH" ]; then
			echo -e "\n⚠ arg must be a path ⚠"
		else break
		fi
	done
}

readString(){
	cmpInit
	while true; do
		[ -n "$SUB" ] && echo -e "\nenter $SUB\n"
		read -rep "▸ " STR
		if [ -z "$STR" ]; then
			echo -e "\n⚐ no input provided ⚐"
		else break
		fi
	done
}

showResults(){
	local lineResult
	local srchTerm="$1"
	while IFS= read -r lineResult; do
		echo " ▸ $(hlMatch "$lineResult" "$srchTerm")"
	done
}

header(){
	local PATH
	if [ "$ARG1" == "f" ] || [ "$ARG1" == "d" ]; then PATH="$ARG2"
	else PATH="/bin, ~/.local/bin & /usr/local/bin"
	fi
	echo "${COLORS[$BG]} searching for ${TYPE}s at: $PATH ${COLORS[RESET]}"
}

footer(){
	if [ -z $TOTAL ]; then TOTAL=$CNT
		echo "${COLORS[$BG]} ${TYPE}names containing $ARG3: $TOTAL ${COLORS[RESET]}"
	else
		echo "${COLORS[$BG]} $TYPE names containing $ARG3: $TOTAL ${COLORS[RESET]}"
	fi
}

drawBorder(){
	local BORDER_CHAR="$1"
	local TCOLS SCOLS MCOLS
	"$OUTCMD" >"/tmp/dump" 2>&1
	TCOLS=$(cat "/tmp/dump" | wc -L)
	SCOLS=$(tput cols)
	MCOLS=$(( SCOLS / 2 ))
	while true; do
		for i in $(seq 1 "$MCOLS"); do
			echo -n "${COLORS[BOLD]}${COLORS[$FG]}$BORDER_CHAR${COLORS[RESET]}"
		done; echo
		break
	done
}

hlMatch(){
	local hlText
	local text="$1"
	local srchTerm="$2"
	hlText=$(echo "$text" | sed -E "s/$srchTerm/${COLORS[$HL]}&${COLORS[RESET]}/ig")
	echo -n "$hlText"
}

urchMain(){
	local CNT TYPE TOTAL
	if [ "$ARG1" == "f" ]; then
		TYPE="file"
	elif [ "$ARG1" == "b" ]; then
		TYPE="executable"
	elif [ "$ARG1" == "d" ]; then
		TYPE="dir"
	fi
	rootFileOut(){
		CNT=$(sudo find / -xdev -type f -iname "*$ARG3*" | wc -l)
		if [ $CNT -ge 1 ]; then
			drawBorder "⩝⩜"; header; drawBorder "⩜⩝"
			sudo find / -xdev -type f -iname "*$ARG3*" -printf "/%P\n" | grep -i "$ARG3" | showResults "$ARG3"
			drawBorder "⩝⩜"; footer; drawBorder "⩜⩝"
		else echo -e "\nno matches\n"
		fi
	}
	rootDirOut(){
		CNT=$(sudo find / -xdev -type d -iname "*$ARG3*" | wc -l)
		if [ $CNT -ge 1 ]; then
			drawBorder "⩝⩜"; header; drawBorder "⩜⩝"
			sudo find / -xdev -type d -iname "*$ARG3*" -printf "/%P\n" | grep -i "$ARG3" | showResults "$ARG3"
			drawBorder "⩝⩜"; footer; drawBorder "⩜⩝"
		else echo -e "\nno matches\n"
		fi
	}
	fileOut(){
		CNT=$(sudo find "$ARG2" -xdev -type f -iname "*$ARG3*" | wc -l)
		if [ $CNT -ge 1 ]; then
			drawBorder "⩝⩜"; header; drawBorder "⩜⩝"
			sudo find "$ARG2" -xdev -type f -iname "*$ARG3*" -printf "%h/%f\n" | grep -i "$ARG3" | showResults "$ARG3"
			drawBorder "⩝⩜"; footer; drawBorder "⩜⩝"
		else echo -e "\nno matches\n"
		fi
	}
	dirOut(){
		CNT=$(sudo find "$ARG2" -xdev -type d -iname "*$ARG3*" | wc -l)
		if [ $CNT -ge 1 ]; then
			drawBorder "⩝⩜"; header; drawBorder "⩜⩝"
			sudo find "$ARG2" -xdev -type d -iname "*$ARG3*" -printf "%h/%f\n" | grep -i "$ARG3" | showResults "$ARG3"
			drawBorder "⩝⩜"; footer; drawBorder "⩜⩝"
		else echo -e "\nno matches\n"
		fi
	}
	binOut(){
		local CNT1=$(sudo find /bin/ -type f -iname "*$ARG3*" | wc -l)
		#local  CNT2=$(sudo find /usr/bin/ -type f -iname "*$ARG3*" | wc -l)
		local CNT3=$(sudo find /usr/local/bin/ -type f -iname "*$ARG3*" | wc -l)
		local CNT4=$(sudo find $HOME/.local/bin/ -type f -iname "*$ARG3*" | wc -l)
		TOTAL=$(( CNT1 + CNT3 + CNT4 ))
		if [ $TOTAL -ge 1 ]; then
			drawBorder "⩝⩜"; header; drawBorder "⩜⩝"
			sudo find /bin/ -xdev -type f -iname "*$ARG3*" -printf "%p\n"\
			| grep -i "$ARG3" | showResults "$ARG3"
			#sudo find /usr/bin/ -xdev -type f -iname "*$ARG3*" -printf " ▸ %p\n"\
			#| grep -i "$ARG3" | showResults "$ARG3"
			sudo find /usr/local/bin/ -xdev -type f -iname "*$ARG3*" -printf "%p\n"\
			| grep -i "$ARG3" | showResults "$ARG3"
			sudo find $HOME/.local/bin/ -xdev -type f -iname "*$ARG3*" -printf "%p\n"\
			| grep -i "$ARG3" | showResults "$ARG3"
			drawBorder "⩝⩜"; footer; drawBorder "⩜⩝"
		else echo -e "\nno matches\n"
		fi
	}
	if [ "$ARG1" == "f" ]; then
		if [ "$ARG2" == "/" ]; then rootFileOut
		else fileOut
		fi
	elif [ "$ARG1" == "b" ]; then binOut
	elif [ "$ARG1" == "d" ]; then
		if [ "$ARG2" == "/" ]; then rootDirOut
		else dirOut
		fi
	fi
}

if [ $# -ge 1 ]; then
	SUB="search"
	if [[ -n "$1" && -d "$2" && -n "$3" ]]; then
		if [[ "$1" =~ ^(f|-f|--file)$ ]]; then
			ARG1="f"; ARG2=$2; ARG3=$3; urchMain
		elif [[ "$1" =~ ^(d|-d|--directory)$ ]]; then
			ARG1="d"; ARG2=$2; ARG3=$3; urchMain
		fi
	elif [[ -n "$1" && -n "$2" && -z "$3" ]]; then
		if [[ "$1" =~ ^(f|-f|--file)$ && -d "$2" ]]; then
			ARG1="f"; ARG2=$2; readString; ARG3="$STR"; urchMain
		elif [[ "$1" =~ ^(b|-b|--binary)$ && -n "$2" ]]; then
			ARG1="b"; ARG3=$2; urchMain
		elif [[ "$1" =~ ^(d|-d|--directory)$ && -d "$2" ]]; then
			ARG1="d"; ARG2=$2; readString; ARG3="$STR"; urchMain
		fi
	elif [[ -n "$1" && -z "$2" ]]; then
		if [[ "$1" =~ ^(f|-f|--file)$ ]]; then
			ARG1="f"; readPath; ARG2="$PTH"; readString; ARG3="$STR"; urchMain
		elif [[ "$1" =~ ^(b|-b|--binary)$ ]]; then
			ARG1="b"; readString; ARG3="$STR"; urchMain
		elif [[ "$1" =~ ^(d|-d|--directory)$ ]]; then
			ARG1="d"; readPath; ARG2="$PTH"; readString; ARG3="$STR"; urchMain
		elif [[ "$1" =~ ^(h|-h|--help)$ ]]; then
			showHelp
			exit 0
		fi
	fi
	elif [[ $# -eq 0 && -z "$1" ]]; then
	echo -e "(f) file\n(b) binary\n(d) directory\n"
	readString
	SUB="search"
	if [ "$STR" == "f" ]; then
		ARG1="f"; readPath; ARG2="$PTH"; readString; ARG3="$STR"; urchMain
	elif [ "$STR" == "b" ]; then
		ARG1="b"; readString; ARG3="$STR"; urchMain
	elif [ "$STR" == "d" ]; then
		ARG1="d"; readPath; ARG2="$PTH"; readString; ARG3="$STR"; urchMain
	fi
fi

unset ARG1 ARG2 ARG3 CHOICE COLORS OUTCMD SUB TOTAL BG FG HL CNT

